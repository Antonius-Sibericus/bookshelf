generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id             String     @id @default(uuid())
  surname        String
  name           String
  paternal       String
  email          String     @unique
  password       String
  isActivated    Boolean    @default(false)
  activationLink String     @unique
  role           UserRole   @default(READER)
  basket         Basket?    @relation()
  published      Published? @relation()
  favorites      Favorites? @relation()
  publisherOf    Book[]     @relation()
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  @@map("users")
}

model Basket {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  books     Book[]   @relation("baskets_books")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("baskets")
}

model Published {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  books     Book[]   @relation("published_books")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("published")
}

model Favorites {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  books     Book[]   @relation("favorites_books")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("favorites")
}

model Book {
  id          String      @id @default(uuid())
  heading     String
  tag         String      @unique
  author      String
  description String
  pages       Int
  isInStock   Boolean     @default(true)
  year        Int
  isbn        Int
  isSoftCover Boolean     @default(false)
  baskets     Basket[]    @relation("baskets_books")
  published   Published[] @relation("published_books")
  favorites   Favorites[] @relation("favorites_books")
  publisherId String      @map("publisher_id")
  publisher   User        @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  categoryTag String      @map("category_tag")
  category    Category    @relation("category_books", fields: [categoryTag], references: [tag], onDelete: Cascade)
  themeTag    String      @map("theme_tag")
  theme       Theme       @relation("theme_books", fields: [themeTag], references: [tag], onDelete: Cascade)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("books")
}

model Category {
  id        String   @id @default(uuid())
  title     String
  tag       String   @unique
  themes    Theme[]  @relation("category_themes")
  books     Book[]   @relation("category_books")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Theme {
  id          String   @id @default(uuid())
  title       String
  tag         String   @unique
  books       Book[]   @relation("theme_books")
  categoryTag String   @map("category_tag")
  category    Category @relation("category_themes", fields: [categoryTag], references: [tag], onDelete: Cascade)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("themes")
}

enum UserRole {
  READER
  PUBLISHER
  ADMIN

  @@map("enum_user_roles")
}
